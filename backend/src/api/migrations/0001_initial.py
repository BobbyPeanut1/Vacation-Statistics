# Generated by Django 5.0.4 on 2024-10-17 11:54

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CountriesModel',
            fields=[
                ('country_id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('country_name', models.CharField(db_column='countryName', max_length=100, validators=[django.core.validators.MinLengthValidator(2, 'Country name must have at least 2 character'), django.core.validators.MaxLengthValidator(100, 'Country cannot have a name longer than 100 characters')])),
            ],
            options={
                'db_table': 'countries',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VacationsModel',
            fields=[
                ('vacations_id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('vacation_description', models.CharField(db_column='vacationDescription', max_length=800, validators=[django.core.validators.MinLengthValidator(1, "Vacation description can't be empty"), django.core.validators.MaxLengthValidator(800, "Vacation description can't be over 800 characters")])),
                ('vacation_start_date', models.DateField(db_column='vacationStartDate')),
                ('vacation_end_date', models.DateField(db_column='vacationEndDate')),
                ('vacation_price', models.IntegerField(db_column='vacationPrice', validators=[django.core.validators.MinValueValidator(0, "Vacation price can't be lower than 0"), django.core.validators.MaxLengthValidator(10000, "Vacation price can't be higher than 10,000")])),
                ('photo_file_name', models.CharField(db_column='photoFileName', max_length=255, validators=[django.core.validators.MinLengthValidator(0, "Photo name can't be empty"), django.core.validators.MaxLengthValidator(255, "Photo name can't be more than 255 characters")])),
            ],
            options={
                'db_table': 'vacations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RolesModel',
            fields=[
                ('role_id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('role_name', models.CharField(db_column='roleName', max_length=45, validators=[django.core.validators.MinLengthValidator(1, "Role name can't be empty"), django.core.validators.MaxLengthValidator(45, "Role name can't be empty")])),
            ],
            options={
                'db_table': 'roles',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LikedvacationsModel',
            fields=[
                ('vacation_id', models.ForeignKey(db_column='vacation_id', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='api.vacationsmodel')),
            ],
            options={
                'db_table': 'likedvacations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UsersModel',
            fields=[
                ('user_id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('first_name', models.CharField(db_column='firstName', max_length=45, validators=[django.core.validators.MinLengthValidator(1, "First name can't be empty"), django.core.validators.MaxLengthValidator(45, "First name can't be over 45 characters")])),
                ('last_name', models.CharField(db_column='lastName', max_length=45, validators=[django.core.validators.MinLengthValidator(1, "First name can't be empty"), django.core.validators.MaxLengthValidator(45, "First name can't be over 45 characters")])),
                ('email', models.CharField(db_column='email', max_length=100, unique=True, validators=[django.core.validators.EmailValidator()])),
                ('password', models.CharField(db_column='password', max_length=150, validators=[django.core.validators.MinLengthValidator(1, "password can't be empty"), django.core.validators.MaxLengthValidator(150, "password can't be over 150 characters")])),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_admin', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('role', models.ForeignKey(db_column='role_id', on_delete=django.db.models.deletion.RESTRICT, to='api.rolesmodel')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
                'managed': True,
            },
        ),
    ]
